package cl.devweb.regexp.exploit;

import java.util.regex.Matcher;
import java.util.regex.Pattern;

import com.google.common.base.Stopwatch;

/**
 * catastrophic backtracking
 *
 * @author morris
 * @date 15-03-2016
 *
 */

/*
 * http://blog.codinghorror.com/regex-performance/
 * http://www.regular-expressions.info/catastrophic.html
 *
	Dim pattern As String = "(x+x+)+y"
	Dim sw As New Stopwatch
	sw.Start()
	Regex.Match("xxxxxxxxxxxxxy", pattern)
	sw.Stop()
	Console.Write("Valid match took ")
	Console.Write(sw.ElapsedMilliseconds)
	Console.WriteLine(" ms")

	Dim s As String = "xx"

	For n As Integer = 1 To 24
		sw.Start()
		Regex.Match(s, pattern)
		sw.Stop()
		Console.Write("Invalid match of ")
		Console.Write(s.Length)
		Console.Write(" chars took ")
		Console.Write(sw.ElapsedMilliseconds)
		Console.WriteLine(" ms")
		s = s + "x"
	Next

	---

	https://netbeans.org/bugzilla/show_bug.cgi?id=167882
	http://stackoverflow.com/questions/15082010/stackoverflowerror-when-matching-large-input-using-regex

 */

public class CatastrophicBacktracking {

	public static void main(String[] args) {

		  Stopwatch timer = Stopwatch.createUnstarted();

	      String pattern = "(x+x+)+y";
	      StringBuilder s = new StringBuilder("xxxxxxxxxxxxxy");

	      Pattern r = Pattern.compile(pattern);

	      timer.start();
	      Matcher m = r.matcher(s);

	      while (m.find()) {
	    	  System.out.print("Found value: " + m.group() );
	      }
	      timer.stop();

	      System.out.println("  timer="+timer);


	      s = new StringBuilder("xx");

	      for(int n=1; n<=27; n++) {

	    	  m = r.matcher(s);

	    	  //we know, it won't find anything at all
	    	  timer.reset();
	    	  timer.start();
		      if (!m.find()) {
		    	  System.out.print("Invalid match of " + n + " chars took ");
		      } else {
		    	  //we never should reach this:
		    	  System.out.println("FAILED!!!!!!!!!!!!!");
		      }
		      timer.stop();
		      System.out.println( timer);

		      s.append("x");
	      }

	}

}

